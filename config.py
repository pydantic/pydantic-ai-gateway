from __future__ import annotations

import json
import subprocess
import sys
from datetime import datetime
from enum import StrEnum
from pathlib import Path

from pydantic import BaseModel, Field, ValidationError
from ruamel.yaml import YAML


class _Model(BaseModel, extra='forbid', use_attribute_docstrings=True):
    """Custom abstract based model with config"""


class GatewayConfig(_Model):
    org: str
    teams: list[Team]
    providers: list[ProviderProxy]
    api_keys: list[ApiKey] = Field(alias='apiKeys')


class Team(_Model):
    name: str
    users: list[User]
    spending_limit_daily: int | None = Field(default=None, alias='spendingLimitDaily')
    spending_limit_weekly: int | None = Field(default=None, alias='spendingLimitWeekly')
    spending_limit_monthly: int | None = Field(default=None, alias='spendingLimitMonthly')


class ProxySchema(StrEnum):
    openai = 'openai'
    anthropic = 'anthropic'


class ProviderProxy(_Model):
    name: str
    base_url: str = Field(alias='baseURL')
    proxy_schema: ProxySchema = Field(alias='proxySchema')
    credentials: str


class User(_Model):
    name: str
    spending_limit_daily: int | None = Field(default=None, alias='spendingLimitDaily')
    spending_limit_weekly: int | None = Field(default=None, alias='spendingLimitWeekly')
    spending_limit_monthly: int | None = Field(default=None, alias='spendingLimitMonthly')


class ApiKey(_Model):
    team: str
    user: str | None = None
    api_key: str = Field(alias='apiKey')
    expires: datetime | None = None
    spending_limit_daily: int | None = Field(default=None, alias='spendingLimitDaily')
    spending_limit_weekly: int | None = Field(default=None, alias='spendingLimitWeekly')
    spending_limit_monthly: int | None = Field(default=None, alias='spendingLimitMonthly')
    spending_limit_total: int | None = Field(default=None, alias='spendingLimitTotal')
    providers: list[str]


config_schema_file = Path('config.schema.json')
config_file = Path('config.yaml')
typescript_content_path = Path('oss-gateway/src/config.ts')
template_config_file = """\
# yaml-language-server: $schema={config_schema_file.name}

# update this file to configure the Pydantic AI Gateway
org: my-rg

teams:
  - name: default
    # spendingLimitDaily: 1000
    # spendingLimitWeekly: 5000
    # spendingLimitMonthly: 20000
    users:
      - name: samuel
        # spendingLimitDaily: 100
        # spendingLimitWeekly: 500
        # spendingLimitMonthly: 2000

providers:
  - name: openai
    baseURL: https://api.openai.com/v1
    proxySchema: openai
    credentials: env:OPENAI_API_KEY

apiKeys:
  - team: default
    user: samuel  # this is optional
    apiKey: testing
    providers: [openai]
    # spendingLimitDaily: 100
    # spendingLimitWeekly: 500
    # spendingLimitMonthly: 2000
    # spendingLimitTotal: 3000
"""


def main() -> int:
    data_json_schema = GatewayConfig.model_json_schema(mode='serialization')
    config_schema_file.write_text(json.dumps(data_json_schema, indent=2))

    if not config_file.exists():
        print(f'Config file {config_file} created, please update this file to configure the gateway')
        config_file.write_text(template_config_file)
        return 0

    try:
        with config_file.open('r') as f:
            raw_config = YAML().load(f)  # type: ignore[reportUnknownVariableType]
    except Exception as e:
        print(f'YAML Error:\n{e}', file=sys.stderr)
        return 1

    try:
        config = GatewayConfig.model_validate(raw_config)
    except ValidationError as e:
        print(f'Error validating {config_file.name}:\n{e}', file=sys.stderr)
        return 1

    typescript_content = f"""\
// DO NOT EDIT THIS FILE DIRECTLY, INSTEAD:
// Edit {config_file} to configure the gateway, then run `make config` to write this file

import type {{ Config }} from './types'

export const config: Config = {config.model_dump_json(indent=2, by_alias=True, exclude_none=True)}
"""
    typescript_content_path.write_text(typescript_content)
    subprocess.run(['npx', 'prettier', str(typescript_content_path), '--write'], check=True, stdout=subprocess.PIPE)
    print(f'Config updated in {typescript_content_path}')
    return 0


if __name__ == '__main__':
    sys.exit(main())
